import { CorporateStatus } from '../../../database/types';
import { CreateContactDto, UpdateContactDto } from '../../contacts/dto/contact.dto';
import { CreateSubsidiaryDto, UpdateSubsidiaryDto } from '../../subsidiaries/dto/subsidiary.dto';
import { z } from 'zod';
export declare class SecondaryApproverDto {
    use_existing_contact?: boolean;
    selected_contact_id?: string;
    salutation?: string;
    first_name?: string;
    last_name?: string;
    company_role?: string;
    system_role?: string;
    email?: string;
    contact_number?: string;
}
export declare class CreateCorporateDto {
    company_name: string;
    reg_number: string;
    status: CorporateStatus;
    office_address1: string;
    office_address2?: string | null;
    postcode: string;
    city: string;
    state: string;
    country: string;
    website?: string | null;
    account_note?: string | null;
    billing_same_as_official: boolean;
    billing_address1: string;
    billing_address2: string;
    billing_postcode: string;
    billing_city: string;
    billing_state: string;
    billing_country: string;
    company_tin: string;
    sst_number: string;
    agreement_from?: string | null;
    agreement_to?: string | null;
    credit_limit: string;
    credit_terms: string;
    transaction_fee: string;
    late_payment_interest: string;
    white_labeling_fee: string;
    custom_feature_fee: string;
    agreed_to_generic_terms: boolean;
    agreed_to_commercial_terms: boolean;
    first_approval_confirmation: boolean;
    second_approval_confirmation: boolean;
}
export declare class CreateCorporateWithRelationsDto extends CreateCorporateDto {
    contacts?: CreateContactDto[];
    subsidiaries?: CreateSubsidiaryDto[];
    secondary_approver?: SecondaryApproverDto;
}
declare const UpdateCorporateDto_base: import("@nestjs/mapped-types").MappedType<Partial<CreateCorporateDto>>;
export declare class UpdateCorporateDto extends UpdateCorporateDto_base {
    id?: string;
    contacts?: UpdateContactDto[];
    subsidiaries?: UpdateSubsidiaryDto[];
    contactIdsToDelete?: string[];
    subsidiaryIdsToDelete?: string[];
    secondary_approver?: SecondaryApproverDto;
}
export declare const secondaryApproverSchema: z.ZodObject<{
    use_existing_contact: z.ZodOptional<z.ZodBoolean>;
    selected_contact_id: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
    salutation: z.ZodOptional<z.ZodString>;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
    company_role: z.ZodOptional<z.ZodString>;
    system_role: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    contact_number: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
export declare const createCorporateSchema: z.ZodObject<{
    company_name: z.ZodString;
    reg_number: z.ZodString;
    status: z.ZodString;
    office_address1: z.ZodString;
    office_address2: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    postcode: z.ZodString;
    city: z.ZodString;
    state: z.ZodString;
    country: z.ZodString;
    website: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    account_note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    billing_same_as_official: z.ZodBoolean;
    billing_address1: z.ZodString;
    billing_address2: z.ZodString;
    billing_postcode: z.ZodString;
    billing_city: z.ZodString;
    billing_state: z.ZodString;
    billing_country: z.ZodString;
    company_tin: z.ZodString;
    sst_number: z.ZodString;
    agreement_from: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    agreement_to: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    credit_limit: z.ZodString;
    credit_terms: z.ZodString;
    transaction_fee: z.ZodString;
    late_payment_interest: z.ZodString;
    white_labeling_fee: z.ZodString;
    custom_feature_fee: z.ZodString;
    agreed_to_generic_terms: z.ZodBoolean;
    agreed_to_commercial_terms: z.ZodBoolean;
    first_approval_confirmation: z.ZodBoolean;
    second_approval_confirmation: z.ZodBoolean;
    contacts: z.ZodPipe<z.ZodTransform<any[], unknown>, z.ZodOptional<z.ZodArray<z.ZodAny>>>;
    subsidiaries: z.ZodPipe<z.ZodTransform<any[], unknown>, z.ZodOptional<z.ZodArray<z.ZodAny>>>;
    secondary_approver: z.ZodPipe<z.ZodTransform<object | undefined, unknown>, z.ZodOptional<z.ZodObject<{
        use_existing_contact: z.ZodOptional<z.ZodBoolean>;
        selected_contact_id: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
        salutation: z.ZodOptional<z.ZodString>;
        first_name: z.ZodOptional<z.ZodString>;
        last_name: z.ZodOptional<z.ZodString>;
        company_role: z.ZodOptional<z.ZodString>;
        system_role: z.ZodOptional<z.ZodString>;
        email: z.ZodOptional<z.ZodString>;
        contact_number: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>>>;
}, z.core.$loose>;
export declare const updateCorporateSchema: z.ZodObject<{
    company_name: z.ZodOptional<z.ZodString>;
    reg_number: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodString>;
    office_address1: z.ZodOptional<z.ZodString>;
    office_address2: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    postcode: z.ZodOptional<z.ZodString>;
    city: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodString>;
    country: z.ZodOptional<z.ZodString>;
    website: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodOptional<z.ZodNullable<z.ZodString>>>>;
    account_note: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    billing_same_as_official: z.ZodOptional<z.ZodBoolean>;
    billing_address1: z.ZodOptional<z.ZodString>;
    billing_address2: z.ZodOptional<z.ZodString>;
    billing_postcode: z.ZodOptional<z.ZodString>;
    billing_city: z.ZodOptional<z.ZodString>;
    billing_state: z.ZodOptional<z.ZodString>;
    billing_country: z.ZodOptional<z.ZodString>;
    company_tin: z.ZodOptional<z.ZodString>;
    sst_number: z.ZodOptional<z.ZodString>;
    agreement_from: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    agreement_to: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    credit_limit: z.ZodOptional<z.ZodString>;
    credit_terms: z.ZodOptional<z.ZodString>;
    transaction_fee: z.ZodOptional<z.ZodString>;
    late_payment_interest: z.ZodOptional<z.ZodString>;
    white_labeling_fee: z.ZodOptional<z.ZodString>;
    custom_feature_fee: z.ZodOptional<z.ZodString>;
    agreed_to_generic_terms: z.ZodOptional<z.ZodBoolean>;
    agreed_to_commercial_terms: z.ZodOptional<z.ZodBoolean>;
    first_approval_confirmation: z.ZodOptional<z.ZodBoolean>;
    second_approval_confirmation: z.ZodOptional<z.ZodBoolean>;
    contacts: z.ZodOptional<z.ZodPipe<z.ZodTransform<any[], unknown>, z.ZodOptional<z.ZodArray<z.ZodAny>>>>;
    subsidiaries: z.ZodOptional<z.ZodPipe<z.ZodTransform<any[], unknown>, z.ZodOptional<z.ZodArray<z.ZodAny>>>>;
    secondary_approver: z.ZodOptional<z.ZodPipe<z.ZodTransform<object | undefined, unknown>, z.ZodOptional<z.ZodObject<{
        use_existing_contact: z.ZodOptional<z.ZodBoolean>;
        selected_contact_id: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
        salutation: z.ZodOptional<z.ZodString>;
        first_name: z.ZodOptional<z.ZodString>;
        last_name: z.ZodOptional<z.ZodString>;
        company_role: z.ZodOptional<z.ZodString>;
        system_role: z.ZodOptional<z.ZodString>;
        email: z.ZodOptional<z.ZodString>;
        contact_number: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>>>>;
    id: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
    contactIdsToDelete: z.ZodOptional<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>>;
    subsidiaryIdsToDelete: z.ZodOptional<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>>;
}, z.core.$loose>;
export declare const updateStatusSchema: z.ZodObject<{
    status: z.ZodString;
    note: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
export declare const investigationLogSchema: z.ZodObject<{
    timestamp: z.ZodString;
    note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    from_status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    to_status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, z.core.$strip>;
export {};
