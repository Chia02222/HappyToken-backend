import { CorporateService } from './corporate.service';
import { CorporateTable, ContactTable, SubsidiaryTable, InvestigationLogTable } from '../database/types';
import { UpdateCorporateDto } from './dto/update-corporate.dto';
export declare class CorporateController {
    private readonly corporateService;
    constructor(corporateService: CorporateService);
    findAll(): Promise<{
        id: number;
        company_name: string;
        reg_number: string;
        office_address1: string;
        office_address2: string | null;
        postcode: string;
        city: string;
        state: string;
        country: string;
        website: string;
        account_note: string;
        status: import("../database/types").CorporateStatus;
        billing_same_as_official: boolean;
        billing_address1: string;
        billing_address2: string;
        billing_postcode: string;
        billing_city: string;
        billing_state: string;
        billing_country: string;
        company_tin: string;
        sst_number: string;
        agreement_from: string | null;
        agreement_to: string | null;
        credit_limit: string;
        credit_terms: string;
        transaction_fee: string;
        late_payment_interest: string;
        white_labeling_fee: string;
        custom_feature_fee: string;
        agreed_to_generic_terms: boolean;
        agreed_to_commercial_terms: boolean;
        first_approval_confirmation: boolean;
        second_approval_confirmation: boolean;
        created_at: string;
        updated_at: string;
    }[]>;
    findById(id: number): Promise<{
        contacts: {
            salutation: string;
            first_name: string;
            last_name: string;
            contact_number: string;
            email: string;
            company_role: string;
            system_role: string;
            id: number;
            created_at: string;
            updated_at: string;
            corporate_id: number;
        }[];
        subsidiaries: {
            id: number;
            company_name: string;
            reg_number: string;
            office_address1: string;
            office_address2: string | null;
            postcode: string;
            city: string;
            state: string;
            country: string;
            website: string;
            account_note: string;
            created_at: string;
            updated_at: string;
            corporate_id: number;
        }[];
        investigationLog: {
            id: number;
            created_at: string;
            corporate_id: number;
            timestamp: string;
            note: string | null;
            from_status: import("../database/types").CorporateStatus | null;
            to_status: import("../database/types").CorporateStatus | null;
        }[];
        id: number;
        company_name: string;
        reg_number: string;
        office_address1: string;
        office_address2: string | null;
        postcode: string;
        city: string;
        state: string;
        country: string;
        website: string;
        account_note: string;
        status: import("../database/types").CorporateStatus;
        billing_same_as_official: boolean;
        billing_address1: string;
        billing_address2: string;
        billing_postcode: string;
        billing_city: string;
        billing_state: string;
        billing_country: string;
        company_tin: string;
        sst_number: string;
        agreement_from: string | null;
        agreement_to: string | null;
        credit_limit: string;
        credit_terms: string;
        transaction_fee: string;
        late_payment_interest: string;
        white_labeling_fee: string;
        custom_feature_fee: string;
        agreed_to_generic_terms: boolean;
        agreed_to_commercial_terms: boolean;
        first_approval_confirmation: boolean;
        second_approval_confirmation: boolean;
        created_at: string;
        updated_at: string;
    } | null>;
    create(corporateData: Omit<CorporateTable, 'id' | 'created_at' | 'updated_at'>): Promise<{
        id: number;
        company_name: string;
        reg_number: string;
        office_address1: string;
        office_address2: string | null;
        postcode: string;
        city: string;
        state: string;
        country: string;
        website: string;
        account_note: string;
        status: import("../database/types").CorporateStatus;
        billing_same_as_official: boolean;
        billing_address1: string;
        billing_address2: string;
        billing_postcode: string;
        billing_city: string;
        billing_state: string;
        billing_country: string;
        company_tin: string;
        sst_number: string;
        agreement_from: string | null;
        agreement_to: string | null;
        credit_limit: string;
        credit_terms: string;
        transaction_fee: string;
        late_payment_interest: string;
        white_labeling_fee: string;
        custom_feature_fee: string;
        agreed_to_generic_terms: boolean;
        agreed_to_commercial_terms: boolean;
        first_approval_confirmation: boolean;
        second_approval_confirmation: boolean;
        created_at: string;
        updated_at: string;
    }>;
    update(id: number, updateData: UpdateCorporateDto): Promise<{
        contacts: {
            salutation: string;
            first_name: string;
            last_name: string;
            contact_number: string;
            email: string;
            company_role: string;
            system_role: string;
            id: number;
            created_at: string;
            updated_at: string;
            corporate_id: number;
        }[];
        subsidiaries: {
            id: number;
            company_name: string;
            reg_number: string;
            office_address1: string;
            office_address2: string | null;
            postcode: string;
            city: string;
            state: string;
            country: string;
            website: string;
            account_note: string;
            created_at: string;
            updated_at: string;
            corporate_id: number;
        }[];
        investigationLog: {
            id: number;
            created_at: string;
            corporate_id: number;
            timestamp: string;
            note: string | null;
            from_status: import("../database/types").CorporateStatus | null;
            to_status: import("../database/types").CorporateStatus | null;
        }[];
        id: number;
        company_name: string;
        reg_number: string;
        office_address1: string;
        office_address2: string | null;
        postcode: string;
        city: string;
        state: string;
        country: string;
        website: string;
        account_note: string;
        status: import("../database/types").CorporateStatus;
        billing_same_as_official: boolean;
        billing_address1: string;
        billing_address2: string;
        billing_postcode: string;
        billing_city: string;
        billing_state: string;
        billing_country: string;
        company_tin: string;
        sst_number: string;
        agreement_from: string | null;
        agreement_to: string | null;
        credit_limit: string;
        credit_terms: string;
        transaction_fee: string;
        late_payment_interest: string;
        white_labeling_fee: string;
        custom_feature_fee: string;
        agreed_to_generic_terms: boolean;
        agreed_to_commercial_terms: boolean;
        first_approval_confirmation: boolean;
        second_approval_confirmation: boolean;
        created_at: string;
        updated_at: string;
    } | null>;
    delete(id: number): Promise<{
        success: boolean;
    }>;
    addContact(corporateId: number, contactData: Omit<ContactTable, 'id' | 'corporate_id' | 'created_at' | 'updated_at'>): Promise<{
        salutation: string;
        first_name: string;
        last_name: string;
        contact_number: string;
        email: string;
        company_role: string;
        system_role: string;
        id: number;
        created_at: string;
        updated_at: string;
        corporate_id: number;
    }>;
    addSubsidiary(corporateId: number, subsidiaryData: Omit<SubsidiaryTable, 'id' | 'corporate_id' | 'created_at' | 'updated_at'>): Promise<{
        id: number;
        company_name: string;
        reg_number: string;
        office_address1: string;
        office_address2: string | null;
        postcode: string;
        city: string;
        state: string;
        country: string;
        website: string;
        account_note: string;
        created_at: string;
        updated_at: string;
        corporate_id: number;
    }>;
    addInvestigationLog(corporateId: number, logData: Omit<InvestigationLogTable, 'id' | 'corporate_id' | 'created_at'>): Promise<{
        id: number;
        created_at: string;
        corporate_id: number;
        timestamp: string;
        note: string | null;
        from_status: import("../database/types").CorporateStatus | null;
        to_status: import("../database/types").CorporateStatus | null;
    }>;
    updateStatus(id: number, body: {
        status: string;
        note?: string;
    }): Promise<{
        contacts: {
            salutation: string;
            first_name: string;
            last_name: string;
            contact_number: string;
            email: string;
            company_role: string;
            system_role: string;
            id: number;
            created_at: string;
            updated_at: string;
            corporate_id: number;
        }[];
        subsidiaries: {
            id: number;
            company_name: string;
            reg_number: string;
            office_address1: string;
            office_address2: string | null;
            postcode: string;
            city: string;
            state: string;
            country: string;
            website: string;
            account_note: string;
            created_at: string;
            updated_at: string;
            corporate_id: number;
        }[];
        investigationLog: {
            id: number;
            created_at: string;
            corporate_id: number;
            timestamp: string;
            note: string | null;
            from_status: import("../database/types").CorporateStatus | null;
            to_status: import("../database/types").CorporateStatus | null;
        }[];
        id: number;
        company_name: string;
        reg_number: string;
        office_address1: string;
        office_address2: string | null;
        postcode: string;
        city: string;
        state: string;
        country: string;
        website: string;
        account_note: string;
        status: import("../database/types").CorporateStatus;
        billing_same_as_official: boolean;
        billing_address1: string;
        billing_address2: string;
        billing_postcode: string;
        billing_city: string;
        billing_state: string;
        billing_country: string;
        company_tin: string;
        sst_number: string;
        agreement_from: string | null;
        agreement_to: string | null;
        credit_limit: string;
        credit_terms: string;
        transaction_fee: string;
        late_payment_interest: string;
        white_labeling_fee: string;
        custom_feature_fee: string;
        agreed_to_generic_terms: boolean;
        agreed_to_commercial_terms: boolean;
        first_approval_confirmation: boolean;
        second_approval_confirmation: boolean;
        created_at: string;
        updated_at: string;
    } | null>;
}
